<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>400</x><y>630</y><w>170</w><h>190</h></coordinates><panel_attributes>&lt;&lt;AbstractClass&gt;&gt;
*ItemObject*
--
id: int
itemType: ItemType (enum)
Name: string
Description: string
icon: sprite
loot: GameObject
--
Responsibilities
*Holds core generic item data*
*for an item*</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>630</x><y>560</y><w>100</w><h>30</h></coordinates><panel_attributes>/*ScriptableObject*/
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>580</y><w>90</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>70;10;10;50</additional_attributes></element><element><id>UMLClass</id><coordinates><x>160</x><y>630</y><w>190</w><h>110</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*Item*
--
id: int
--
Responsibilities
*Represents a base level item*
*uses id to retrieve relevant data*</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>400</x><y>840</y><w>170</w><h>190</h></coordinates><panel_attributes>&lt;&lt;AbstractClass&gt;&gt;
*GearObject*
--
Slot: GearSlot (enum)
EquippedItem: GameObject
Buffs: GearBuff[]
--
Responsibilities
--
*Hold generic gear data*
*Represents the range of stats 
possible for instances of this
specific gear*</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>480</x><y>810</y><w>30</w><h>50</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;30</additional_attributes></element><element><id>UMLClass</id><coordinates><x>160</x><y>840</y><w>190</w><h>120</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*Gear*
--
buffs: GearBuffs
--
Responsibilities
*Represents a single gear item*
*buffs represent just this piece*
*of gear*</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>250</x><y>730</y><w>30</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;110</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1160</x><y>660</y><w>410</w><h>250</h></coordinates><panel_attributes>&lt;&lt;AbstractClass&gt;&gt;
*InventoryUI*
--
icon: DragAndDropElement
inventory: InventoryObject
InventorySlotDictionary: Dictionary&lt;InventorySlotButton, InventorySlot&gt;
--
implements base class functionality
CreateSlots() map buttons on UI to an InventorySlot
UpdateDisplay() render the UI to reflect InventoryObject
abstract CreateLinkToInventoryUpdateEvent() link UpdateDisplay to Event
AddEvent() adds all the enter/exit/dragging events to the buttons
--
Responsibilities
*Controls the underlying UI mechanics of dragging and dropping as*
*well as updating the UI images to reflect the current contents of the *
*InventoryObject it represents*
*It maps an InventorySlotButton to an InventorySlot*</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1120</x><y>540</y><w>100</w><h>30</h></coordinates><panel_attributes>MonoBehaviour</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1160</x><y>560</y><w>30</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;100</additional_attributes></element><element><id>Relation</id><coordinates><x>1360</x><y>900</y><w>30</w><h>80</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;60</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1160</x><y>960</y><w>400</w><h>160</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*StaticInventory*
An inventory where the slots are created in Unity and remain static
--
CreateSlots() implements base class functionality
CreateLinkToInventoryUpdateEvent() implements base class functionality
--
Responsibilities
*Defines how an inventory binds a static inventory of buttons to*
*inventorySlots*
*Subscribes the UpdateDisplay function to it's inventory's Event*</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>600</x><y>630</y><w>210</w><h>200</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*InventoryObject*
--
SavePath: String
database: ItemDatabaseObject
container: Inventory
*InventoryChanged: Event*
--
AddItem()
RemoveItem()
MoveItem()
DropItem()
--
Responsibilities
*Data wrapper around an inventory*
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>580</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;50</additional_attributes></element><element><id>UMLClass</id><coordinates><x>600</x><y>870</y><w>210</w><h>100</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*Inventory*
--
inventorySlots: InventorySlot[]
--
Responsibilities
*Holds a list of InventorySlots*</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>760</x><y>600</y><w>420</w><h>140</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;30;10;10;370;10;370;120;400;120</additional_attributes></element><element><id>Relation</id><coordinates><x>570</x><y>700</y><w>70</w><h>190</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>50;170;10;130;10;10;30;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>600</x><y>1020</y><w>210</w><h>110</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*InventorySlot*
--
gear: Gear
amount: int
--
Responsibilities
*Represents a position in inventory*</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>750</x><y>910</y><w>90</w><h>130</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;110;70;60;70;10;60;10</additional_attributes></element><element><id>Relation</id><coordinates><x>340</x><y>860</y><w>280</w><h>230</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;10;50;10;50;210;260;210</additional_attributes></element><element><id>UMLClass</id><coordinates><x>160</x><y>420</y><w>210</w><h>180</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*ItemDatabaseObject*
--
gearObjects: gearObject[]
GetGearObject&lt;int, GearObject&gt;
--
Responsibilities
*Maps every GearObject in the game*
*to an integer*
*Automatically reconfigures when*
*unity Serializes this object*
*This database will set the object's*
*ID, not just store it*
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>330</x><y>390</y><w>320</w><h>190</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>300;170;170;10;10;10;10;30</additional_attributes></element><element><id>Relation</id><coordinates><x>780</x><y>730</y><w>400</w><h>310</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;290;70;240;100;130;350;100;350;10;380;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1100</x><y>730</y><w>80</w><h>170</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;150;30;100;30;10;60;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>910</x><y>880</y><w>220</w><h>120</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*InventorySlotButton*
--
inventoryParentGroup: InventoryUI
image: sprite
tooltiptext: string
--
Responsibilities
*Controls the text and icon on screen*</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1070</x><y>560</y><w>80</w><h>340</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>60;10;30;30;30;260;10;320</additional_attributes></element><element><id>Relation</id><coordinates><x>1120</x><y>900</y><w>110</w><h>50</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>90;10;80;30;30;30;10;30</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1590</x><y>680</y><w>190</w><h>160</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*DragDropElement*
--
overObject: InventorySlotButton
overSlot: InventorySlot
fromSlot: InventorySlot
fromObject: InventorySlotButton
--
Responsibilities
*Holds Data while the user is*
*Drag and Dropping*</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1130</x><y>640</y><w>500</w><h>90</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>480;40;460;10;10;10;10;70;30;70</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1280</x><y>400</y><w>210</w><h>110</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*InventoryManager*
--
inventory: InventoryObject
--
Responsibilities
*Picks up LootableObjects when*
*the gameobject collides with it*
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1200</x><y>500</y><w>120</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;40;100;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>880</x><y>400</y><w>200</w><h>110</h></coordinates><panel_attributes>&lt;&lt;Class&gt;&gt;
*LootableItem*
--
gear: Gear 
amount: int
--
Responsibilities
*In game pick up/droppable item*</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1040</x><y>500</y><w>130</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>110;40;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1070</x><y>440</y><w>230</w><h>40</h></coordinates><panel_attributes>lt=&lt;.&gt;
OnCollision</panel_attributes><additional_attributes>10;20;210;20</additional_attributes></element><element><id>UMLClass</id><coordinates><x>940</x><y>330</y><w>100</w><h>30</h></coordinates><panel_attributes>Spawner</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1340</x><y>330</y><w>100</w><h>30</h></coordinates><panel_attributes>Player
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>970</x><y>350</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;50;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1380</x><y>350</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;50;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>300</x><y>440</y><w>600</w><h>420</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;400;80;380;80;110;580;10</additional_attributes></element></diagram>